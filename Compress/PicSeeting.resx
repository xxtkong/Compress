<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        WAD/tzwA/rc/AP+8RgD+vEkA/79NAPrGbQD/x1sA/8tkAP/MZgD51I0A9NGPAPXaqAD90XYA+dOAAPXR
        hAD73ZkA+N+nANOeGgD/3YgA+OWzAP/mmQD75aMAqYsbAO/WgADz6ssAh3ILALSaIgD78L0A/vK0AK6o
        MwD7/NIA8PHiALfKYgC/zoQAlbNVAHCcQABglDUAa6g8AEeBJgBwuFIATbM2ABl3DQAgeRoAAGYAAABj
        AAAAYAAAAF8AAABdAAAAWgAAAFgAAABXAAAAVQAAAFIAAABRAAAATwAAAEwAAABLAAAASQAAAEYAAABE
        AAAAQwAAAEEAAAA+AAAAOwAAADgAAANuAwADagMAB5wHAAVrBQAIbAgACGQIAA2eDQANdQ0AFZgVABBz
        EAAQcBAAE3sTAB2kHQAipiIAHpAeACCAIAAzrTMAKIYoADWuNQAuki4ANZ41AD2rPQBCp0IAPps+AEu3
        SwBNuE0AVbxVAEifSABavVoAUKZQAF6/XgBhwGEAWKxYAGbCZgBpw2kAYrZiAG3FbQBouWgAccZxAHPH
        cwB2yHYAeMZ4AHzLfACAzIAAvb69ALq7ugC3uLcAra6tAAluDgCBz4YAgs+IAGK2aQCC0IkAY7htAILQ
        igCD0o4AJIAzACN6MABjuXAAZLpyAIPTkACE1JIAhNOSAGW8dwCE1ZUAhNaWAGW+fACF15oAPptYAIbY
        nQBmv4AAhtmfAGfBhACH2qEAh9ulAIfcpwCI3aoAiN2pAHnSngCI3qsAid6tAGLBjACJ4LIAid+wAIvi
        tQCK4bUAi+O4AIzkugCK4bYAm52cAIvkuwCL5LwAjOW/AHLTrACN58QAjOXBAI3oxgCO6soAjunJAI/r
        zQCP7dEAj+zPAJDu1QCQ7dMAke/XAJLx2gCT8+AAk/LfAJLx3QCU9OMAlfbmAJX46wCV9+oAl/ryAMLD
        wwDAwcEAvr+/ALy9vQC7vLwAt7i4ALW2tgCztLQApaamAMDBwgCnp6gAn5+gAJ2dngCampsAsbGxAKqq
        qgCioqIAl5eXAJWVlQCSkpIAkZGRAHBwcAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
        AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAv//////////////////////////////////////
        AgL+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v8CAv6jo6msrq+1uLm7v7/Bw8THy83NztPU1Nba
        2dv+/wIC/qqurrS4uLu9v7/CxcTIys3QztTU19jZ2d3e3v7/AgL+q62ysrO3t7e6vr7AwMbO0tTU1trZ
        29ze3uHk/v8CAv1nZ2dnZ2ZmZmZlZGRkZGVosbC8yd3f4OHj4uX+/wIC/W1tbGtra2trampqamlpand2
        dG2o1eTj4ubo6P7/AgL8c3FwcXFxcHBwcG9ubm5sdHduqNXj5ebo5+np/v8CAvt2aW12dXV1dXV0dHRx
        ZoFqcmOHtrvDzM7Pz8/+/wIC+3d9ZHZ3d3d3d3d3d25iiYdkiaGjo6Ojo6Ojo/7/AgL3coGCdHd3d3d3
        d3d3amKdlXyTo6OjoqKfnJqZ/v8CAtFkiWJtd3d3d3d2d3VkYqOjm6CenJmZXlRZVEj+/wIC9ZiVgWd3
        d3dybXR2Z2KPmpmZl5aUXlEsLCsrK/7/AgL6o6OPYnJ3dGZibnBji5SSkpGRXE0mJSUuLS0t/v8CAvqg
        no9ia3dtg2JjY2KMXE0vICkpKSgoKCgoKCf+/wIC8peWjmJqdmR7YmJjYFAaGRkjIiIiIiIiISEhIP7/
        AgL0kZCNf2JmeYZiYmJQFBIdHR0dHRwcHBsaGhkZ/v8CAvmKiIiGeWJ4X2FiXRYODg4OFRUVFBQUExMS
        HR3+/wICp4WEhIBiYlhTWWJYTCoXFxYQEA8PDw4ODg4ODv7/AgKnfn56X1taS0tLWUtLS0tLS0UeDAwM
        DAwMCwsL/v8CAvhXV0lJTk5JSUlJSUlJSUlJSUQeERENBQoJCQj+/wIC8T8/Pz8/Pz8/Pz8/Pz8/Pz8/
        Pz8+P0NBGAcHBv7/AgLwOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0BPVlZWHwQD/v8CAu89OTc3Nzc3Nzc3Nzc3
        Nzc3Nz5TVVVVVVVVVVX+/wICpVJMNTQ0NDQ0NDg6NTQ0NDpGUlJSUlJSUlJSUv7/AgLuSkpAMjEzNTZG
        SkpHPDZASkpKSkpKSkpKSkpK/v8CAqRCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkL+/wIC7DAwMDAw
        MDAwMDAwMDAwMDAwMDAwMDAwMDAwMP7/AgLrJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk/v8CAurq
        8+ztpabx+Kf58vr10ff7/P3+/v7+/v7+/v7+AgIC//////////+AAAADAAAAAwAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAc=
</value>
  </data>
</root>