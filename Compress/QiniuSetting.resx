<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        fn7NpqbHmJiedn2qk5yrgYXLoqKqoqKDW2aFZXGljZbLvcMAAAAAAACHtNQEZ6QKaLUQacWpk2G5WAqZ
        NAGZNAHt7e309PTr2Njw8PDp6enh4eHOpqbRqqq4fHy7eHi8d3fRq6uxgoWRZm65kJLYtrbWsrKspqar
        n5+ZeHuAWGSvmaPLvcMAAACd+f4XfLMOab5Aea6ZRRKZNAGfOgGlQAGqRQHVsLHLlpblxsbSmZnFf3/L
        j4/Gd3fGbW3JamrKaWnWtrbdxMTcwcHbvb3XtLTSp6ekg4Own5+wn5+wn5+niYlzTl3o+P+C+P9y7/xL
        XGavXiafOwKlPwGsRwGyTQG4UwHVsbLHj4//qCL7xXfvzbPJfX3GbW3JZ2fFYGDFamrhzMzdxMTcwcHW
        srLMmZnNnJybamqlgYGwmJiynJyrjo5zTl3X8/939P9s7/9e6/9blYmOVhKuTAG4UwHBWwHFXwHRqanT
        lHL/qCD/qiP/qyXzyJber6fPioq8W1u7a2vhzMzUrKzNnJzNm5vVrq7UsLC0mJicbW2bamqmgICti4tz
        Tl3R8f9s7/9f7P9T6P9G4/83zuxwdEq3YAHJZAHBWwHWsbHal1f/tDf/tjr/tzz/uD//uD//uD/6tkrp
        snzWmorSiorYqqrbvb3YtrbPqqqwhoa5hoape3uvhoahcXFzTl3z/P917v9T6P9H5P884P8u2/8i2P8e
        r9BndlPBWwHTr6/sqEz/ukP/vEb/vUn/v0z/v0z/vkv/u0b/uUL/tz7cmnTLaWnbvb3YtrbPqamtgIDM
        mZnMmZm/jIyxhIRzTl0AAADF5fRh5/884P8u2/8k2P8X1P8Kz/8BzP/PtLTLpqb1s0z/v07/wVL/w1X/
        xVn/xVn/xFb/wVL/v07/vUn/tz3KaWnbvb3YtrbPqKiqeXnMmZnMmZnMmZmygYFzTl0AAAAAAAC32edT
        1OAk2P8Z1P8M0P8CzP8CyP7UubnLoof/xVj/y2X/zWr/z23/0G//0G//0G//zWn/y2T/yF7xrFnLgYHb
        vb3YtrbQpqasdXW5hoasenqcamq1fHxzTl0AAAAAAADr5tzrtmKUh04RzfcCzP8CyP4FwP7iy8vPpHb/
        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
        /////////////w==
</value>
  </data>
</root>